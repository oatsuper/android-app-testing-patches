#summary debugging/troubleshooting advice

== Troubleshooting Guide  ==
You have applied the patches, but they do not seem to be working.  What to do?
<ol>
<li> Did you rebuild the Android system.img and reflash the device with the new system.img?  Are you sure?
<li><b>adb logcat</b>. The _frameworks_ patch contains a change to !ViewServer.java that logs so you can see it from _adb logcat_.  When you are executing a UXTDK test you should see lines like this in the logcat output (Galaxy Nexus running ICS 4.0.3):
<pre>
D/ViewServer(  219): DUMPQ 41b3a580
D/ViewServer(  219): DUMPQ-done 135
D/ViewServer(  219): DUMPQ ffffffff
D/ViewServer(  219): DUMPQ-done 64
</pre>
<ol/>
The DUMPQ line is logged when !ViewServer gets the DUMPQ request.  The line contains the window id (in hex) whose dump is being requested.  All f's means "the current focus window".

The DUMPQ-done line is logged after everything is complete.  The number on this line is the number of milliseconds it took to perform the dump.

<li><b>devicelogs</b> (examine dump files for sanity).  The purpose of the DUMPQ command is to deliver a description of the GUI objects in a window to the UXTDK agent.  The agent writes each dump to a separate file in a tdk/devicelogs/MM-dd-hh-mm/ directory (MM = month, dd = day, hh = hour, mm = minute).  The directory is created when the agent is started and the agent uses this directory for as long as it is executing.  Each agent DUMPQ command will result in a DUMPQ file.  Here is an excerpt from the agent's log of a test:
<pre>
2012-03-29 10:54:24,643 [TDKService] DEBUG|ACTION: findTopWindow: [0](), [1]50
2012-03-29 10:54:24,644 [ViewHierarchyLoader] INFO |==> DUMPQ ffffffff
2012-03-29 10:54:24,645 [ViewHierarchyLoader] INFO |waiting for in.ready
2012-03-29 10:54:24,746 [ViewHierarchyLoader] INFO |==> GET_FOCUS
2012-03-29 10:54:24,792 [ViewHierarchyLoader] INFO |Focus Window: 41b3a580 com.android.launcher/com.android.launcher2.Launcher
2012-03-29 10:54:24,792 [ViewHierarchyLoader] INFO |com.android.internal.policy.impl.PhoneWindow$DecorView@4168eef8: (0, 0)
2012-03-29 10:54:24,823 [ViewHierarchyLoader] INFO |}=> DONE 12
2012-03-29 10:54:24,823 [TDKService] DEBUG|{findTopWindow} returning (3): [0]0 [1]1 [2]INFO:(dumpFile: 12_dumpq.txt)
</pre>
In this excerpt we see that the agent is issuing a DUMPQ command (DUMPQ ffffffff).  A few lines from the bottom you see:  <b>DONE 12</b> which gives the number of the DUMPQ file, 12_dumpq.txt, in the agent's devicelogs/MM-dd-hh-mm directory where this GUI dump will be written.
<br><br>
You can edit these nnn_dumpq.txt files to see if it looks ok.  It contains many really long lines.  If you are having problems with the patches you may be requested to deliver the entire directory to Wind River personnel.  Each line represents a GUI object in the window.  Each line should have at least these elements:

  * screenX
  * screenY
  * getHeight()
  * getWidth()
  * getVisibility()
  * mLeft
  * mTop

Each line begins with the pattern: <i>dotted-name@hex-number</i>.  For example: android.widget.!FrameLayout@40599930.   If you see such a pattern in the middle of a line (except the first line), this is almost for certain an error.
<li>*Use !HierarchyViewer*.  UXTDK contains a modified !HierarchyViewer.jar that will use DUMPQ.