
project packages/apps/Email/
diff --git a/Android.mk b/Android.mk
index ce837b1..63c04a6 100644
--- a/Android.mk
+++ b/Android.mk
@@ -36,7 +36,7 @@ LOCAL_PACKAGE_NAME := Email
 
 LOCAL_PROGUARD_FLAG_FILES := proguard.flags
 
-LOCAL_SDK_VERSION := current
+#LOCAL_SDK_VERSION := current
 
 # The Emma tool analyzes code coverage when running unit tests on the
 # application. This configuration line selects which packages will be analyzed,
diff --git a/src/com/android/email/activity/MessageListItem.java b/src/com/android/email/activity/MessageListItem.java
index 34a029e..61f181a 100644
--- a/src/com/android/email/activity/MessageListItem.java
+++ b/src/com/android/email/activity/MessageListItem.java
@@ -13,7 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+/*
+ * Copyright (C) 2011 Wind River Systems, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.android.email.activity;
 
 import android.content.Context;
@@ -37,8 +51,10 @@ import android.text.format.DateUtils;
 import android.text.style.ForegroundColorSpan;
 import android.text.style.StyleSpan;
 import android.util.AttributeSet;
+import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
+import android.view.ViewDebug;
 import android.view.accessibility.AccessibilityEvent;
 
 import com.android.email.R;
@@ -595,4 +611,94 @@ public class MessageListItem extends View {
             setContentDescription(sSubjectEmptyDescription);
         }
     }
+    
+    
+    private static int getLayoutId(int mode) {
+        switch (mode) {
+            case MessageListItemCoordinates.WIDE_MODE:
+                return R.layout.message_list_item_wide;
+            case MessageListItemCoordinates.NORMAL_MODE:
+                return R.layout.message_list_item_normal;
+            default:
+                throw new IllegalArgumentException("Unknown conversation header view mode " + mode);
+        }
+    }
+    
+    
+    protected void dumpClass(ViewDebug dp) {
+        super.dumpClass(dp);
+        
+        if (mText != null) {
+            dp.writeEntry("mText", mText.toString());
+        }
+        dp.writeEntry("mSender", mSender);
+        if (mSnippet != null) {
+            dp.writeEntry("mSnippet", mSnippet.toString());
+        }
+        if (mFormattedDate != null) {
+            dp.writeEntry("mFormattedDate", mFormattedDate.toString());
+        }
+        dp.writeEntry("mSubject", mSubject);
+        dp.writeEntry("mRead", mRead);
+        dp.writeEntry("mHasAttachment", mHasAttachment);
+        dp.writeEntry("mHasInvite", mHasInvite);
+        
+        dp.writeEntry("mHasBeenRepliedTo", mHasBeenRepliedTo);
+        dp.writeEntry("mHasBeenForwarded", mHasBeenForwarded);
+        dp.writeEntry("mViewWidth", mViewWidth);
+        dp.writeEntry("mViewHeight", mViewHeight);
+        dp.writeEntry("mMode", mMode);
+        dp.finish();
+
+        // get screenX and screenY of this item
+        int screenLoc[] = new int[2];
+        getLocationOnScreen(screenLoc);
+
+        // 3 statements copied from onTouchEvent()
+        initializeSlop(getContext());
+        int checkRight = mCoordinates.checkmarkX
+                  + mCoordinates.checkmarkWidthIncludingMargins + sScaledTouchSlop;
+        int starLeft = mCoordinates.starX - sScaledTouchSlop;
+
+        // This inflate is unnecessary, but it creates a view object
+        View view = LayoutInflater.from(mContext).inflate(getLayoutId(mMode), null);
+        View checkmark = view.findViewById(R.id.checkmark);
+        dp.setLevel(dp.getLevel() + 1);
+        dp.indent();
+        dp.writeViewLikeName(checkmark);
+        dp.writeEntry("screenX", screenLoc[0]);
+        dp.writeEntry("screenY", screenLoc[1]);
+        if (checkmark != null) {
+        	// If you tap anywhere in the left part of the MessageListItem, the
+        	// checkbox will toggle, see onTouchEvent()
+            dp.writeEntry("mTop", mTop);
+            dp.writeEntry("mBottom", mBottom);
+            dp.writeEntry("mLeft", 0);
+            dp.writeEntry("mRight", checkRight);
+            dp.writeEntry("getVisibility()", "VISIBLE");
+            dp.writeEntry("getHeight()", getHeight());
+            dp.writeEntry("getWidth()", checkRight);
+        }
+        dp.writeEntry("mCheckSelected", mAdapter.isSelected(this));
+        dp.finish();
+
+        dp.indent();
+        View starmark = view.findViewById(R.id.star);
+        dp.writeViewLikeName(starmark);
+        dp.writeEntry("screenX", starLeft);
+        dp.writeEntry("screenY", screenLoc[1]);
+        if (checkmark != null) {
+        	// If you tap anywhere in the right part of the MessageListItem, the
+        	// star will toggle, see onTouchEvent()
+            dp.writeEntry("mTop", mTop);
+            dp.writeEntry("mBottom", mBottom);
+            dp.writeEntry("mLeft", starLeft);
+            dp.writeEntry("mRight", mRight);
+            dp.writeEntry("getVisibility()", "VISIBLE");
+            dp.writeEntry("getHeight()", getHeight());
+            dp.writeEntry("getWidth()", mRight - starLeft);
+        }
+        dp.writeEntry("mIsFavorite", mIsFavorite);
+    }
+
 }

